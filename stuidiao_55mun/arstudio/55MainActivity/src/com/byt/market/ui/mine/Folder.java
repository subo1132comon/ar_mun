/*
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.byt.market.ui.mine;

import java.util.ArrayList;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.GridLayoutAnimationController;
import android.view.animation.Interpolator;
import android.view.animation.TranslateAnimation;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.byt.market.R;
import com.byt.market.activity.MainActivity;
import com.byt.market.util.LogUtil;

/**
 * Represents a set of icons chosen by the user or generated by the system.
 */
public class Folder extends RelativeLayout implements
        OnClickListener, /*View.OnLongClickListener,*/ Animation.AnimationListener {
    private static final boolean DBG_LAYOUT = false;
    private static final String TAG = "Launcher.Folder";

    protected String mLabelString = null;
    protected TextView mFolderLabel;
    protected EditText mEditFolderLabel;
    protected RelativeLayout mEditContainer;
    protected View mCustomView;
    private ImageView mClearButton = null;

    protected FolderContent mContent;
    
    protected MineViewManager mLauncher;

    protected FolderInfo mInfo;
    
    private static int INDICATOR_WIDTH;// = 25;
    private static int INDICATOR_HEIGHT;// = 25;

    private static int LABEL_HEIGHT;// = 25;
    private static int LABEL_X;// = 20;
    private static int LABEL_Y;// = 5;
    private static int EDIT_BG_PADDING_X;// = 10;

    private int mCustomViewHeight;
    private int mMaskWidth;
    private int mMaskHeight;

    private ImageView mTopIconView;
    private ImageView mBottomIconView;
    private ImageView mIndicatorView;
    private BubbleTextView mFolderIconView;

    private int mFolderIconX = 0;
    private int mFolderIconY = 0;
    private int mFolderIconW = 0;
    private int mFolderIconH = 0;

    ArrayList<Bitmap> mBitmaps = new ArrayList<Bitmap>(8);

    private Paint mPaint = new Paint();
    private Paint mTopLinePaint = new Paint();
    private Paint mBottomLinePaint = new Paint();
    private Path mTopLinePath = new Path();
    private Path mBottomLinePath = new Path();

    private DragController mDragController;

    private boolean mMeasured = false;

    private static final int INIT = 0;
    private static final int OPENING = 1;
    private static final int OPENED = 2;
    private static final int CLOSING = 3;
    private static final int CLOSED = 4;

    private int mState = INIT;

    public int getmState() {
		return mState;
	}

	private int mSplitX;
    private int mSplitY;

    private static final int DURATION = 400;

    private boolean mInDock = false;

    private int mTopMove;
    private int mBottomMove;

    private final Interpolator mInterpolator = new DecelerateInterpolator(1.5f);

    private static ColorMatrixColorFilter mColorFilter;

    private View.OnTouchListener mOnTouchListener = 
        new View.OnTouchListener() {
            public boolean onTouch(View v, MotionEvent event) {
                if (mState == OPENED)
                    mLauncher.closeFolder();

                return true;
            }
        };

    private CloseRunnable mCloseRunnable = new CloseRunnable();

    private Mask mTopMask = new Mask(getContext()) {
        @Override
        protected void dispatchDraw(Canvas canvas) {
            super.dispatchDraw(canvas);

            if (mState == OPENING || mState == OPENED || mState == CLOSING) {
                Paint p = mTopLinePaint;
                Path path = mTopLinePath;
                canvas.drawPath(path, p);
             }
        }
    };

    private Mask mBottomMask = new Mask(getContext()) {
        @Override
        protected void dispatchDraw(Canvas canvas) {
            super.dispatchDraw(canvas);

            if (mState == OPENING || mState == OPENED || mState == CLOSING) {
                Path path = mBottomLinePath;
                Paint p = mBottomLinePaint;
                canvas.drawPath(path, p);
            }
        }
    };

    /**
     * Used to inflate the Folder from XML.
     *
     * @param context The application's context.
     * @param attrs The attribtues set containing the Workspace's customization values.
     */
    public Folder(Context context, AttributeSet attrs) {
        super(context, attrs);

        Paint p = mTopLinePaint;
        p.setStyle(Paint.Style.STROKE);
        p.setStrokeWidth(2);
        p.setColor(0);

        p = mBottomLinePaint;
        p.setStyle(Paint.Style.STROKE);
        p.setStrokeWidth(2);
        p.setColor(0);

        Resources res = context.getResources();
        INDICATOR_WIDTH = (int)res.getDimension(R.dimen.folder_indicator_width);
        INDICATOR_HEIGHT = (int)res.getDimension(R.dimen.folder_indicator_height);
        LABEL_HEIGHT = (int)res.getDimension(R.dimen.folder_label_height);
        LABEL_X = (int)res.getDimension(R.dimen.folder_label_x);
        LABEL_Y = (int)res.getDimension(R.dimen.folder_label_y);
        EDIT_BG_PADDING_X = (int)res.getDimension(R.dimen.folder_edit_bg_padding_x);
        
        ColorMatrix cm = new ColorMatrix();
        cm.setSaturation(0.0f);
        mColorFilter = new ColorMatrixColorFilter(cm);
    }

    @Override
    protected void onFinishInflate() {
        super.onFinishInflate();

        mFolderLabel = (TextView) findViewById(R.id.folder_label);
        mEditFolderLabel = (EditText) findViewById(R.id.edit_folder_label);
        mEditContainer = (RelativeLayout) findViewById(R.id.edit_container);
        mCustomView = findViewById(R.id.custom_view);
        mClearButton = (ImageView) findViewById(R.id.folder_label_clear_button);
        mClearButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (mEditContainer.getVisibility() != View.GONE) {
                    if (LauncherApplication.DBG) LogUtil.d(TAG, "clearButton onClick()");
                    mEditFolderLabel.setText("", TextView.BufferType.EDITABLE);
                }
            }
        });

        FolderContent content = (FolderContent) findViewById(R.id.folder_content);
        content.setTag("Launcher.FolderContent");
        content.isForFolder(true);
        content.setFolder(this);
        mContent = content;
    }
   
    public Workspace getContent() {
        return mContent;
    }

    public void onClick(View v) {
    }

    public void setDragController(DragController dragController) {
        mDragController = dragController;
        mContent.setDragController(mDragController);
    }

    private void updateFolderName() {
        EditText editLabel = mEditFolderLabel;

        String str = editLabel.getText().toString();

        if (str == null || str.equals("")) {
            str = mLabelString;
        } else {
            mLabelString = str;
        }

        mFolderLabel.setText(str);
        //mLauncher.updateFolderName(this, str);
        editLabel.setText(str, TextView.BufferType.EDITABLE);
    }

    public void enterEditMode() {
        mContent.enterEditMode();

        RelativeLayout editContainer = mEditContainer;
        EditText editLabel = mEditFolderLabel;
        TextView label = mFolderLabel;

        editLabel.setText(mLabelString, TextView.BufferType.EDITABLE);

        Animation animation = AnimationUtils.loadAnimation(mLauncher.getContext(), R.anim.fade_in_fast);
        animation.setFillBefore(true);

        editContainer.setVisibility(View.VISIBLE);
        editContainer.startAnimation(animation);

        editLabel.setFocusable(true);
        editLabel.requestFocus();

        label.setVisibility(View.GONE);
    }

    public void exitEditMode(boolean withAnimation) {
        mContent.exitEditMode(withAnimation);

        RelativeLayout editContainer = mEditContainer;
        TextView label = mFolderLabel;

        Animation animation = AnimationUtils.loadAnimation(mLauncher.getContext(), R.anim.fade_out_fast);
        animation.setFillBefore(true);

        editContainer.startAnimation(animation);
        editContainer.setVisibility(View.GONE);

        label.setVisibility(View.VISIBLE);

        updateFolderName();
    }

    /* used by folder content */
    public void onIconDragOut(Object dragInfo) {
        CellLayout.CellInfo cellInfo = (CellLayout.CellInfo)dragInfo;
        ShortcutInfo shortcutInfo = (ShortcutInfo)cellInfo.cell.getTag();

        ((UserFolderInfo)mInfo).remove(shortcutInfo);
    }

    private boolean findSingleSlot(CellLayout.CellInfo cellInfo) {
        final int[] xy = new int[2];
        if (findSlot(cellInfo, xy, 1, 1)) {
            cellInfo.cellX = xy[0];
            cellInfo.cellY = xy[1];
            return true;
        }
        return false;
    }

    private boolean findSlot(CellLayout.CellInfo cellInfo, int[] xy, int spanX, int spanY) {
        if (!cellInfo.findCellForSpan(xy, spanX, spanY)) {
            cellInfo = mContent.findAllVacantCells(null);
            if (!cellInfo.findCellForSpan(xy, spanX, spanY)) {
                return false;
            }
        }
        return true;
    }

    void addShortcutInfo(ShortcutInfo info) {
        CellLayout.CellInfo cellInfo = new CellLayout.CellInfo();
        findSingleSlot(cellInfo);
        if (LauncherApplication.DBG) LogUtil.d(TAG, "addShortcutInfo() cellX:"+cellInfo.cellX+" cellY:"+cellInfo.cellY);
        final View view = mLauncher.createShortcut(info);
        mContent.addInCurrentScreen(view, cellInfo.cellX, cellInfo.cellY, 1, 1, false);
    }

    void setLauncher(MineViewManager launcher) {
        mLauncher = launcher;

        mContent.setLauncher(mLauncher);
       // mContent.setOnLongClickListener(mLauncher);
    }
    
    /**
     * @return the FolderInfo object associated with this folder
     */
    FolderInfo getInfo() {
        return mInfo;
    }

    @Override
    public void onAnimationStart(Animation animation) {
        if (mState == INIT) {
            mState = OPENING;
        } else if (mState == OPENED) {
            mState = CLOSING;

            /* mono to color */
            mTopIconView.setBackgroundDrawable(null);
            mTopIconView.clearColorFilter();

            mBottomIconView.setBackgroundDrawable(null);
            mBottomIconView.clearColorFilter();
        }
    }

    @Override
    public void onAnimationRepeat(Animation animation) {
    }

    @Override
    public void onAnimationEnd(Animation animation) {
        if (mState == OPENING) {
            mState = OPENED;
            post(colorRunnable);
            return;
        } else if (mState == CLOSING) {
            mState = CLOSED;
            post(paintColorRunnable);
            postDelayed(mCloseRunnable, DURATION/5);
        }
    }

    private int mMainActivityBottomBarHeight = 0;
    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);

        if (mMeasured) return;

        mMeasured = true;

        mContent.measure(widthMeasureSpec, heightMeasureSpec);

        int height = MeasureSpec.getSize(heightMeasureSpec);

        int contentHeight = mContent.getMeasuredHeight();
        mCustomViewHeight = mCustomView.getMeasuredHeight();
        int topMove = 0;
        int heightAll = Math.max(mCustomViewHeight, contentHeight + LABEL_HEIGHT);
        int bottomMove = heightAll;

        /* If in dock, keep icon unmoved. In Screen, keey bottom some space left. */
        if (mInDock) {
            bottomMove = 0;
            topMove = heightAll - bottomMove;
        } else {
        	if(mMainActivityBottomBarHeight <= 0){
        		if(this.getContext() instanceof MainActivity){
        			mMainActivityBottomBarHeight = ((MainActivity)this.getContext()).findViewById(R.id.mineButtonview).getHeight();
        		}
        	}
            int bottomOffsetLimit = height - mMainActivityBottomBarHeight - heightAll -15;//(int)getResources().getDimension(R.dimen.recent_applications_app_icon_mask);
            /* prefer to move bottom, if bottom is too low, move top */
            if ((mSplitY + bottomMove) > bottomOffsetLimit) {
                bottomMove = bottomOffsetLimit - mSplitY;
                bottomMove = (bottomMove > 0) ? bottomMove : 0;
                topMove = heightAll - bottomMove;
            }

            /* Top shall remain limit size. */
            if (mSplitY - topMove < mTopOffsetLimit) {
                topMove = mSplitY - mTopOffsetLimit < 0 ? 0 : mSplitY - mTopOffsetLimit;
                bottomMove = heightAll - topMove;
            }
        }

        int contentWidth = mContent.getMeasuredWidth();
        if (DBG_LAYOUT) LogUtil.d(TAG, "onMeasure() content height: " + contentHeight + " width: " + contentWidth);
        LogUtil.d(TAG, "onMeasure() content height: " + contentHeight + " width: " + contentWidth);

        //Animation moveAnimationTop = null;
        //Animation moveAnimationBottom = null;
        Animation alphaAnimation = null;
        Animation alphaToZeroAnimation = null;

        alphaAnimation = new AlphaAnimation(1.0f, 0.4f);
        alphaAnimation.setDuration(DURATION);
        alphaAnimation.setFillAfter(true);

        alphaToZeroAnimation = new AlphaAnimation(1.0f, 0.0f);
        alphaToZeroAnimation.setDuration(DURATION);
        alphaToZeroAnimation.setFillAfter(true);
        /*if (topMove > 0) {
            moveAnimationTop = new TranslateAnimation(0, 0, topMove, 0);
            moveAnimationTop.setInterpolator(mInterpolator);
            moveAnimationTop.setDuration(DURATION);
            moveAnimationTop.setAnimationListener(this);
        }*/

        /*if (bottomMove > 0) {
            moveAnimationBottom = new TranslateAnimation(0, 0, -bottomMove, 0);
            moveAnimationBottom.setInterpolator(mInterpolator);
            moveAnimationBottom.setDuration(DURATION);
            if (topMove <= 0)
                moveAnimationBottom.setAnimationListener(this);
        }*/

        mTopIconView.startAnimation(alphaAnimation);
        mBottomIconView.startAnimation(alphaAnimation);
        //mIndicatorView.startAnimation(alphaToZeroAnimation);
        mIndicatorView.setAlpha(0);
        //if (moveAnimationTop != null) mTopMask.startAnimation(moveAnimationTop);
        //if (moveAnimationBottom != null) mBottomMask.startAnimation(moveAnimationBottom);
        

        Folder.LayoutParams lp = (Folder.LayoutParams)mTopMask.getLayoutParams();
        lp.x = 0;
        lp.y -= topMove;

        lp = (Folder.LayoutParams)mBottomMask.getLayoutParams();
        lp.x = 0;
        lp.y += bottomMove;
        mTopMove = topMove;
        mBottomMove = bottomMove;

        measureContentView(contentHeight, contentWidth);
        measureFolderLabel(contentHeight, contentWidth);
        measureCustomView(contentHeight, contentWidth);
        this.post(new OpenAnimationRunnable(topMove,bottomMove));
        //this.postDelayed(new OpenAnimationRunnable(topMove,bottomMove), 3000);
        
    }

    Runnable colorRunnable = new Runnable() {
        public void run() {
            ColorDrawable d = new ColorDrawable();
            d.setColorFilter(0x60FFFFFF, PorterDuff.Mode.SRC_IN);
            
            mTopIconView.setColorFilter(mColorFilter);
            mTopIconView.setBackgroundDrawable(d);

            mBottomIconView.setColorFilter(mColorFilter);
            mBottomIconView.setBackgroundDrawable(d);
        }
    };
   
    private final class OpenAnimationRunnable implements Runnable {

    	private int mTopMove;
    	private int mBottomMove;
    	Animation moveAnimationBottom = null;
    	Animation moveAnimationTop = null;
    	public OpenAnimationRunnable(int topMove, int bottomMove){
    		mTopMove = topMove;
    		mBottomMove = bottomMove;
    	}

    	@Override
    	public void run() {
    		// TODO Auto-generated method stub
    		if (mTopMove > 0) {
    			moveAnimationTop = new TranslateAnimation(0, 0, mTopMove - INDICATOR_HEIGHT / 2, 0);
    			moveAnimationTop.setInterpolator(mInterpolator);
    			moveAnimationTop.setDuration(DURATION);
    			moveAnimationTop.setAnimationListener(Folder.this);
    		}

    		if (mBottomMove > 0) {
    			moveAnimationBottom = new TranslateAnimation(0, 0, -mBottomMove - INDICATOR_HEIGHT / 2, 0);
    			// moveAnimationBottom.setInterpolator(mInterpolator);
    			moveAnimationBottom.setDuration(DURATION);
    			if (mTopMove <= 0)
    				moveAnimationBottom.setAnimationListener(Folder.this);
    		}
    		if (moveAnimationTop != null) mTopMask.startAnimation(moveAnimationTop);
    		if (moveAnimationBottom != null) mBottomMask.startAnimation(moveAnimationBottom);
    	} 

    }
    int mTopOffsetLimit = 0;

    void onOpen(int splitX, int splitY, int topOffsetLimit) {
    	splitY += INDICATOR_HEIGHT;
        if(DBG_LAYOUT) LogUtil.d(TAG, "onOpen() splitX:"+splitX+" splitY:"+splitY);
        int[] location = new int[2];
        getLocationOnScreen(location);

        splitX -= location[0];
        splitY -= location[1];

        mTopOffsetLimit = topOffsetLimit;

        mInDock = (mFolderIconY >= splitY);

        /* adjust indicator center x */
        splitX -= INDICATOR_WIDTH/2;

        /* generate the mask view, including wallpaper and icons */
        generateMaskView(splitX, splitY);

    	/* highlight folder icon view */
        if (mFolderIconView != null) {
            if (mInDock) {
            	mBottomMask.getLocationOnScreen(location);

            	Folder.LayoutParams lp = new Folder.LayoutParams(mFolderIconX - location[0], mFolderIconY - splitY - location[1]);
                lp.width = mFolderIconW;
                lp.height = mFolderIconH;

                mBottomMask.addView(mFolderIconView, -1, lp); //add to the end of child array
                
                Folder.LayoutParams lp1 = new Folder.LayoutParams(splitX, splitY);
                lp1.width = INDICATOR_WIDTH;
                lp1.height = INDICATOR_HEIGHT;

                mTopMask.addView(mIndicatorView, -1, lp1); //add to the end of child array

            } else {
            	mTopMask.getLocationOnScreen(location);
            	
            	Folder.LayoutParams lp = new Folder.LayoutParams(mFolderIconX - location[0], mFolderIconY - location[1]);
                lp.width = mFolderIconW;
                lp.height = mFolderIconH;

                mTopMask.addView(mFolderIconView, -1, lp); //add to the end of child array
                Folder.LayoutParams lp1 = new Folder.LayoutParams(splitX, 0);
                lp1.width = INDICATOR_WIDTH;
                lp1.height = INDICATOR_HEIGHT;

                mBottomMask.addView(mIndicatorView, -1, lp1); //add to the end of child array
            }
        }

        mSplitX = splitX;
        mSplitY = splitY;

        // When the folder opens, we need to refresh the GridView's selection by
        // forcing a layout
        requestLayout();

        /* for folder open animation effect */
        Runnable paintColorRunnable = new Runnable() {
            public void run() {
                /*mBottomLinePaint.setColor(0x33FFFFFF);
                mTopLinePaint.setColor(0x33FFFFFF);*/
            	mBottomLinePaint.setColor(0xaa666666);
                mTopLinePaint.setColor(0xaa666666);
            }
        };

        postDelayed(paintColorRunnable, DURATION*2/3);
    }

    private void getMoveTop(int splitY){
    	int height = this.getMeasuredHeight();

        int contentHeight = mContent.getMeasuredHeight();
        mCustomViewHeight = 150;
        int topMove = 0;
        int heightAll = Math.max(mCustomViewHeight, contentHeight + LABEL_HEIGHT);
        int bottomMove = heightAll;

        /* If in dock, keep icon unmoved. In Screen, keey bottom some space left. */
        if (mInDock) {
            bottomMove = 0;
            topMove = heightAll - bottomMove;
        } else {
            int bottomOffsetLimit = height - 190;//(int)getResources().getDimension(R.dimen.recent_applications_app_icon_mask);

            /* prefer to move bottom, if bottom is too low, move top */
            if ((splitY + bottomMove) > bottomOffsetLimit) {
                bottomMove = bottomOffsetLimit - splitY;
                bottomMove = (bottomMove > 0) ? bottomMove : 0;
                topMove = heightAll - bottomMove;
            }

            /* Top shall remain limit size. */
            if (splitY - topMove < mTopOffsetLimit) {
                topMove = splitY - mTopOffsetLimit < 0 ? 0 : splitY - mTopOffsetLimit;
                bottomMove = heightAll - topMove;
            }
        }
    }
    void onClose() {
        onClose(true);
    }

    void onClose(boolean animation) {
        if (LauncherApplication.DBG) LogUtil.d(TAG, "onClose()");

        if (!animation) {
            final Workspace workspace = mLauncher.getWorkspace();
            workspace.getChildAt(workspace.getCurrentScreen()).requestFocus();

            mLauncher.onClosed(Folder.this);
            for (Bitmap bm : mBitmaps) {
                bm.recycle();
                bm = null;
            }

            System.gc();

            updateFolderName();

            return;
        }

        //Animation moveAnimationTop = null;
       // Animation moveAnimationBottom = null;
        /*Animation alphaAnimation = null;
        Animation alphaToFullAnimation = null;

        alphaAnimation = new AlphaAnimation(0.4f, 1.0f);
        alphaAnimation.setDuration(DURATION);
        alphaAnimation.setFillAfter(true);

        alphaToFullAnimation = new AlphaAnimation(0.0f, 1.0f);
        alphaToFullAnimation.setDuration(DURATION/2);
        alphaToFullAnimation.setFillAfter(true);*/

        /*if (mTopMove > 0) {
            moveAnimationTop = new TranslateAnimation(0, 0, 0, mTopMove);
            moveAnimationTop.setInterpolator(mInterpolator);
            moveAnimationTop.setDuration(DURATION);
            moveAnimationTop.setFillAfter(true);
            moveAnimationTop.setAnimationListener(this);
        }

        if (mBottomMove > 0) {
            moveAnimationBottom = new TranslateAnimation(0, 0, 0, -mBottomMove);
            moveAnimationBottom.setInterpolator(mInterpolator);
            moveAnimationBottom.setDuration(DURATION);
            moveAnimationBottom.setFillAfter(true);
            if (mTopMove <= 0)
                moveAnimationBottom.setAnimationListener(this);
        }*/

       // mTopIconView.startAnimation(alphaAnimation);
        //mBottomIconView.startAnimation(alphaAnimation);
        //mIndicatorView.startAnimation(alphaToFullAnimation);
       // if (moveAnimationTop != null) mTopMask.startAnimation(moveAnimationTop);
        //if (moveAnimationBottom != null) mBottomMask.startAnimation(moveAnimationBottom);
        post(new CloseAnimationRunnable(mTopMove,mBottomMove));
        
        //postDelayed(paintColorRunnable, DURATION/3);

        updateFolderName();
    }
    Runnable paintColorRunnable = new Runnable() {
        public void run() {
            mBottomLinePaint.setColor(0);
            mTopLinePaint.setColor(0);
        }
    };
    private final class CloseAnimationRunnable implements Runnable {

    	private int mTopMove;
    	private int mBottomMove;
    	Animation moveAnimationBottom = null;
    	Animation moveAnimationTop = null;
    	public CloseAnimationRunnable(int topMove, int bottomMove){
    		mTopMove = topMove;
    		mBottomMove = bottomMove;
    	}

    	@Override
    	public void run() {
    		// TODO Auto-generated method stub
    		if (mTopMove > 0) {
                moveAnimationTop = new TranslateAnimation(0, 0, 0, mTopMove - INDICATOR_HEIGHT / 2);
                //moveAnimationTop.setInterpolator(mInterpolator);
                moveAnimationTop.setDuration(DURATION);
                moveAnimationTop.setFillAfter(true);
                moveAnimationTop.setAnimationListener(Folder.this);
            }

    		if (mBottomMove > 0) {
                moveAnimationBottom = new TranslateAnimation(0, 0, 0, -mBottomMove - INDICATOR_HEIGHT / 2);
                //moveAnimationBottom.setInterpolator(mInterpolator);
                moveAnimationBottom.setDuration(DURATION);
                moveAnimationBottom.setFillAfter(true);
                if (mTopMove <= 0)
                    moveAnimationBottom.setAnimationListener(Folder.this);
            }
    		if (moveAnimationTop != null) mTopMask.startAnimation(moveAnimationTop);
    		if (moveAnimationBottom != null) mBottomMask.startAnimation(moveAnimationBottom);
    	} 

    }

    void bind(FolderInfo info) {
        mInfo = info;

        ArrayList<ShortcutInfo> contents = ((UserFolderInfo) info).contents;
        for (ShortcutInfo i : contents) {
            if (LauncherApplication.DBG) LogUtil.d(TAG, "bind() add content:"+i);
            addShortcutInfo(i);
        }
    }

    public void setLabelString(String label) {
        mLabelString = label;
    }

    public void updateShortcuts(ArrayList<ApplicationInfo> apps) {
        if (mContent == null) return;
        //mContent.updateShortcuts(apps);
        updateFolderIcon();
    }

    public void removeItems(ArrayList<ApplicationInfo> apps, ArrayList<ShortcutInfo> infos) {
        if (mContent == null) return;
        //mContent.removeItems(apps);

        ArrayList<ShortcutInfo> contents = ((UserFolderInfo) mInfo).contents;
        for (ShortcutInfo info : infos) {
            contents.remove(info);
        }

        if (LauncherApplication.DBG) {
            LogUtil.d(TAG, "removeItems() contents size:"+contents.size());
        }

        updateFolderIcon();
    }

    private void updateFolderIcon() {
        if (mInfo == null) return;

        if (LauncherApplication.DBG) LogUtil.d(TAG, "updateFolderIcon()...");
        if(mInfo.mFolderIcon.getIconView() instanceof FolderIcon){
        	FolderIcon folderIcon = (FolderIcon)mInfo.mFolderIcon.getIconView();
            folderIcon.reGenerateFolderIcon();

            Drawable icon = folderIcon.getIcon();

            if (mFolderIconView == null) {
                mFolderIconView = (BubbleTextView) LayoutInflater.from(mLauncher.getContext()).inflate(R.layout.folder_icon, null, false);;
            }
            //mFolderIconView.setText(mInfo.title);
            mFolderIconView.setCompoundDrawables(null, icon, null, null);
        } else if (mInfo.mFolderIcon.getIconView() instanceof BubbleTextView){
        	 if (mFolderIconView == null) {
                 mFolderIconView = (BubbleTextView) LayoutInflater.from(mLauncher.getContext()).inflate(R.layout.mine_application, null, false);;
                 mFolderIconView.setTextSize(13);
             }
             //mFolderIconView.setText(mInfo.title);
             mFolderIconView.setCompoundDrawablesWithIntrinsicBounds(null, mInfo.mFolderIcon.getIconView().getCompoundDrawables()[1], null, null);
        }
    }

    public void setFolderIconLocation(int x, int y, int w, int h) {
        if (LauncherApplication.DBG) LogUtil.d(TAG, "setFolderIconLocation() x:"+x+" y:"+y);

        int[] location = new int[2];
        getLocationOnScreen(location);

        mFolderIconX = x - location[0];
        mFolderIconY = y - location[1];
        mFolderIconW = w;
        mFolderIconH = h;

        updateFolderIcon();
    }

    private void generateMaskView(int splitX, int splitY) {
        /* get icons bitmap first. */
        mMaskWidth = mLauncher.getDragLayerWidth();
        mMaskHeight = mLauncher.getDragLayerHeight();

        final Bitmap mask = Bitmap.createBitmap(mMaskWidth, mMaskHeight, Bitmap.Config.ARGB_4444);
        if (mask == null) {
            throw new OutOfMemoryError();
        }

        mBitmaps.add(mask);

        Canvas canvas = new Canvas(mask);
        mLauncher.onDrawIconsBitmap(canvas);

        /* get indicator drawable. */
        Drawable d = mInDock ? getResources().getDrawable(R.drawable.folder_indicator_reverse) :
            getResources().getDrawable(R.drawable.folder_indicator);

        /* for wallpaper */
        splitTop(d, (Bitmap)null, splitX, splitY);
        splitBottom(d, (Bitmap)null, splitX, splitY);

        /* for icons */
        mTopIconView = splitTop(d, mask, splitX, splitY);
        mBottomIconView = splitBottom(d, mask, splitX, splitY);
    }

    private void generateIndicator(Bitmap bm, Drawable d, int splitX, int splitY) {
        int width = mMaskWidth;

        Bitmap indicatorBitmap = Bitmap.createBitmap(INDICATOR_WIDTH, INDICATOR_HEIGHT, Bitmap.Config.RGB_565);
        if (indicatorBitmap == null) {
            throw new OutOfMemoryError();
        }

        mBitmaps.add(indicatorBitmap);

        /* Draw indicator bitmap */
        Canvas indicatorCanvas = new Canvas(indicatorBitmap);

        d.setBounds(0, 0, INDICATOR_WIDTH, INDICATOR_HEIGHT);
        d.draw(indicatorCanvas);

        Paint p = mPaint;
        p.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));

        if (LauncherApplication.DBG) LogUtil.d(TAG, "generateIndicator splitX:"+splitX+" splitY:"+splitY);
        if (!mInDock) {
            indicatorCanvas.drawBitmap(bm, 
                    new Rect(splitX, splitY-INDICATOR_HEIGHT, splitX+INDICATOR_WIDTH, splitY),
                    new Rect(0, 0, INDICATOR_WIDTH, INDICATOR_HEIGHT), p);
        } else {
            indicatorCanvas.drawBitmap(bm, 
                    new Rect(splitX, 0, splitX+INDICATOR_WIDTH, INDICATOR_HEIGHT),
                    new Rect(0, 0, INDICATOR_WIDTH, INDICATOR_HEIGHT), p);
        }

        mIndicatorView = new ImageView(mLauncher.getContext());
        mIndicatorView.setImageDrawable(new BitmapDrawable(indicatorBitmap));

        /* update path line */
        Path path = mTopLinePath;
        if (mInDock) {
            float y = splitY-mTopLinePaint.getStrokeWidth()+1;
            path.moveTo(0, y);
            path.rLineTo(width, 0);
        } else {
            path.moveTo(0, splitY-mTopLinePaint.getStrokeWidth()+1);
            path.rLineTo(splitX, 0);
            path.rLineTo(INDICATOR_WIDTH/2, -INDICATOR_HEIGHT/2);
            path.rLineTo(INDICATOR_WIDTH/2, INDICATOR_HEIGHT/2);
            path.rLineTo(width-splitX-INDICATOR_WIDTH, 0);
        }

        path = mBottomLinePath;
        if (mInDock) {
            path.moveTo(0, mBottomLinePaint.getStrokeWidth()-1);
            path.rLineTo(splitX, 0);
            path.rLineTo(INDICATOR_WIDTH/2, INDICATOR_HEIGHT/2);
            path.rLineTo(INDICATOR_WIDTH/2, -INDICATOR_HEIGHT/2);
            path.rLineTo(width-splitX-INDICATOR_WIDTH, 0);
        } else {
            float y = INDICATOR_HEIGHT+p.getStrokeWidth()+1;
            path.moveTo(0, y);
            path.rLineTo(width, 0);
        }
    }

    private ImageView splitTop(Drawable d, Bitmap bm, int splitX, int splitY) {
        int width = mMaskWidth;
        int height = splitY;

        Bitmap bitmap = Bitmap.createBitmap(width > 0 ? width : 1, height > 0 ? height : 1, Bitmap.Config.ARGB_4444);
        if (bitmap == null) {
            throw new OutOfMemoryError();
        }

        mBitmaps.add(bitmap);

        Canvas canvas = new Canvas(bitmap);

        Paint p = mPaint;
        p.setXfermode(null);
        if (bm != null) {
            canvas.drawBitmap(bm, new Rect(0, 0, mMaskWidth, height), new Rect(0, 0, mMaskWidth, height), p);
        } else {
        	
            mLauncher.onDrawWallpaper(canvas, mMaskWidth, mMaskHeight, height, true, p);
            if (!mInDock) {
                /* draw indicator bitmap */
                generateIndicator(bitmap, d, splitX, splitY);

                /* remove indicator area from top bitmap */
                Paint paint = ((BitmapDrawable)d).getPaint();
                paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));

                d.setBounds(splitX, height-INDICATOR_HEIGHT, splitX+INDICATOR_WIDTH, height);
                d.draw(canvas);
            }
        }

        ImageView top = new ImageView(mLauncher.getContext());
        top.setImageDrawable(new BitmapDrawable(bitmap));
        top.setOnTouchListener(mOnTouchListener);

        Folder.LayoutParams lp = new Folder.LayoutParams(0, 0);
        lp.width = width;
        lp.height = height;

        mTopMask.addView(top, -1, lp); //add to the end of child array

        if (bm == null) {
            lp = new Folder.LayoutParams(0, 0);
            lp.width = width;
            if (mInDock) {
                lp.height = height+INDICATOR_HEIGHT;
            } else {
                lp.height = height;
            }

            addView(mTopMask, -1, lp);
        }
 
        return top;
    }

    private ImageView splitBottom(Drawable d, Bitmap bm, int splitX, int splitY) {
        int width = mMaskWidth;
        int height = splitY > 0 ? (mMaskHeight - splitY) : mMaskHeight/2;
        height -= INDICATOR_HEIGHT;
        Bitmap bitmap = Bitmap.createBitmap(width > 0 ? width : 1, height > 0 ? height : 1, Bitmap.Config.ARGB_4444);
        if (bitmap == null) {
            throw new OutOfMemoryError();
        }

        mBitmaps.add(bitmap);

        Canvas canvas = new Canvas(bitmap);

        if (bm != null) {
            canvas.drawBitmap(bm, new Rect(0, splitY , width, mMaskHeight), new Rect(0,  0, width, height ),null);
        } else {
            mLauncher.onDrawWallpaper(canvas, mMaskWidth, mMaskHeight, height, false, null);
            
            if (mInDock) {
                /* draw indicator bitmap */
                generateIndicator(bitmap, d, splitX, splitY);

                /* remove indicator area from top bitmap */
                Paint paint = ((BitmapDrawable)d).getPaint();
                paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));

                d.setBounds(splitX, 0, splitX+INDICATOR_WIDTH, INDICATOR_HEIGHT);
                d.draw(canvas);
            }
        }

        ImageView bottom = new ImageView(mLauncher.getContext());
        bottom.setImageDrawable(new BitmapDrawable(bitmap));
        //bottom.setBackgroundResource(R.drawable.folder_wp);
        bottom.setOnTouchListener(mOnTouchListener);

        Folder.LayoutParams lp = new Folder.LayoutParams(0, mInDock ? 0 : INDICATOR_HEIGHT);

        lp.width = width;
        lp.height = height;
        mBottomMask.addView(bottom, -1, lp); //add to the end of child array

        if (bm == null) {
            if (mInDock) {
                lp = new Folder.LayoutParams(0, splitY);
                lp.width = width;
                lp.height = height;
            } else {
                lp = new Folder.LayoutParams(0, splitY-INDICATOR_HEIGHT);
                lp.width = width;
                lp.height = height+INDICATOR_HEIGHT;
            }

            addView(mBottomMask, -1, lp);
        }

        return bottom;
    }

    @Override
    public LayoutParams generateLayoutParams(AttributeSet attrs) {
        return new Folder.LayoutParams(getContext(), attrs);
    }

    @Override
    protected boolean checkLayoutParams(ViewGroup.LayoutParams p) {
        return p instanceof Folder.LayoutParams;
    }

    @Override
    protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) {
        return new Folder.LayoutParams(p);
    }

    public static class LayoutParams extends RelativeLayout.LayoutParams {
        public int x;
        public int y;

        public LayoutParams(int x, int y) {
            super(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
            this.x = x;
            this.y = y;
        }

        public LayoutParams(Context c, AttributeSet attrs) {
            super(c, attrs);
        }

        public LayoutParams(ViewGroup.LayoutParams source) {
            super(source);
        }
    }

    private void measureFolderLabel(int contentHeight, int contentWidth) {
        TextView label = mFolderLabel;
        label.setText(mLabelString);

        Folder.LayoutParams lp = (Folder.LayoutParams)label.getLayoutParams();
        lp.x = LABEL_X;
        lp.y = mSplitY - mTopMove + LABEL_Y;

        lp.width = contentWidth - LABEL_X;
        lp.height = LABEL_HEIGHT;

        RelativeLayout editContainer = mEditContainer;
        lp = (Folder.LayoutParams)editContainer.getLayoutParams();
        lp.x = LABEL_X - EDIT_BG_PADDING_X;
        lp.y = mSplitY - mTopMove + LABEL_Y;

        lp.width = contentWidth - LABEL_X;
        lp.height = LABEL_HEIGHT;

        /* for editable folder label */
        /*
        label = mEditFolderLabel;
        label.setText(mLabelString, TextView.BufferType.EDITABLE);

        lp = (Folder.LayoutParams)label.getLayoutParams();
        lp.x = LABEL_X - EDIT_BG_PADDING_X;
        lp.y = mSplitY - mTopMove + LABEL_Y;

        lp.width = contentWidth - LABEL_X;
        lp.height = LABEL_HEIGHT;
        */

        /* for editable folder clear button */
        /*
        ImageView clear = mClearButton;

        lp = (Folder.LayoutParams)clear.getLayoutParams();

        lp.width = clear.getDrawable().getMinimumWidth();
        lp.height = clear.getDrawable().getMinimumHeight();

        lp.x = contentWidth - EDIT_BG_PADDING_X - lp.width;
        lp.y = mSplitY - mTopMove + LABEL_Y;
        */

        if (DBG_LAYOUT) LogUtil.d(TAG, "measureFolderLabel() lp.x:"+lp.x+" lp.y:"+lp.y+" lp.w:"+lp.width+" lp.h:"+lp.height);
    }
    
    private void measureCustomView(int contentHeight, int contentWidth) {
    	View customView = mCustomView;
        Folder.LayoutParams lp = (Folder.LayoutParams)customView.getLayoutParams();
        lp.x = 0;
        lp.y = mSplitY - mTopMove /*+ LABEL_Y*/;

        lp.width = contentWidth;
        lp.height = mCustomViewHeight /*- LABEL_Y * 2*/;

        
        if (DBG_LAYOUT) LogUtil.d(TAG, "measureCustomView() lp.x:"+lp.x+" lp.y:"+lp.y+" lp.w:"+lp.width+" lp.h:"+lp.height);
        LogUtil.d(TAG, "measureCustomView() lp.x:"+lp.x+" lp.y:"+lp.y+" lp.w:"+lp.width+" lp.h:"+lp.height);
    }

    private void measureContentView (int contentHeight, int contentWidth) {
        // folder content
        FolderContent content = mContent;

        Folder.LayoutParams lp = (Folder.LayoutParams)content.getLayoutParams();

        lp.x = 0;
        lp.y = mSplitY - mTopMove + LABEL_Y + LABEL_HEIGHT;
        lp.width = contentWidth;
        lp.height = contentHeight;

        if (DBG_LAYOUT) LogUtil.d(TAG, "measureContentView() lp.x:"+lp.x+" lp.y:"+lp.y);
    }

    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        int count = getChildCount();

        for (int i = 0; i < count; i++) {
            View child = getChildAt(i);
            if (child.getVisibility() != GONE) {

                Folder.LayoutParams lp = (Folder.LayoutParams) child.getLayoutParams();

                //if (LauncherApplication.DBG) LogUtil.d(TAG, "onLayout() i:"+i+" count:"+count+" x:"+lp.x+" y:"+lp.y+" w:"+lp.width+" h:"+lp.height);

                int childLeft = lp.x;
                int childTop = lp.y;

                child.layout(childLeft, childTop, childLeft + lp.width, childTop + lp.height);
            }
        }
    }

    private class Mask extends ViewGroup {
        public Mask(Context context) {
            super(context);
        }

        @Override
        protected void onLayout(boolean changed, int l, int t, int r, int b) {
            int count = getChildCount();
            for (int i = 0; i < count; i++) {
                View child = getChildAt(i);
                if (child.getVisibility() != GONE) {
                    Folder.LayoutParams lp = (Folder.LayoutParams) child.getLayoutParams();
                    //if (DBG_LAYOUT) LogUtil.d(TAG, "Mask onLayout() i:"+i+" count:"+count+" x:"+lp.x+" y:"+lp.y+" w:"+lp.width+" h:"+lp.height);
                    child.layout(lp.x, lp.y, lp.x+lp.width, lp.y+lp.height);
                }
            }
        }
    }

    private class CloseRunnable implements Runnable {
        CloseRunnable() {
        }

        public void run() {
            final Workspace workspace = mLauncher.getWorkspace();
            if(workspace != null && workspace.getChildAt(workspace.getCurrentScreen()) != null){
            	workspace.getChildAt(workspace.getCurrentScreen()).requestFocus();
            }

            mLauncher.onClosed(Folder.this);
            for (Bitmap bm : mBitmaps) {
                bm.recycle();
                bm = null;
            }

            System.gc();
        }
    }
    
	public boolean postProcess() {
		UserFolderInfo i = (UserFolderInfo) mInfo;
		if (LauncherApplication.DBG) {
			LogUtil.d(TAG, "postProcessFolder() contents size:"	+ i.contents.size());
		}
		
		if (i.contents.size() == 0) {
			// to remove empty folder
//			mLauncher.removeFolder(this);

			AppIcon icon = (AppIcon)mInfo.mFolderIcon;
			CellLayout cellLayout = (CellLayout) icon.getParent();
	        cellLayout.removeView(mInfo.mFolderIcon);
			cellLayout.autoAlignment();
	        
	        mDragController.removeDropTarget((FolderIcon)icon.getIconView());

			return true;
		}

		return false;
	}
}
